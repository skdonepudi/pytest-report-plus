[
  {
    "test": "test_fail",
    "nodeid": "tests/dummy_tests/test_cases.py::test_fail",
    "status": "skipped",
    "duration": 0.0001305829791817814,
    "error": null,
    "markers": [
      "xfail",
      "link",
      "flaky"
    ],
    "file": "tests/dummy_tests/test_cases.py",
    "line": 5,
    "stdout": "stdout from fail\n",
    "stderr": "stderr from fail\n",
    "timestamp": "2025-06-25T16:53:51.361506Z",
    "screenshot": "test_fail.png",
    "logs": [],
    "worker": "main",
    "links": [
      "https://example.com/fail-trace"
    ],
    "flaky": false
  },
  {
    "test": "test_pass",
    "nodeid": "tests/dummy_tests/test_cases.py::test_pass",
    "status": "passed",
    "duration": 3.5250006476417184e-05,
    "error": null,
    "markers": [
      "flaky",
      "link"
    ],
    "file": "tests/dummy_tests/test_cases.py",
    "line": 15,
    "stdout": "stdout from pass\n",
    "stderr": "stderr from pass\n",
    "timestamp": "2025-06-25T16:53:51.362069Z",
    "screenshot": "test_pass.png",
    "logs": [],
    "worker": "main",
    "links": [
      "https://example.com/pass-trace"
    ],
    "flaky": false
  },
  {
    "test": "test_skip",
    "nodeid": "tests/dummy_tests/test_cases.py::test_skip",
    "status": "skipped",
    "duration": 3.1917006708681583e-05,
    "error": null,
    "markers": [
      "skip"
    ],
    "file": "tests/dummy_tests/test_cases.py",
    "line": 24,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.362307Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_send_email_success",
    "nodeid": "tests/e2e/test_email.py::test_send_email_success",
    "status": "passed",
    "duration": 0.003943291987525299,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 8,
    "stdout": "****************************************************************\nTest Subject is sent to recipient@example.com from sender@example.com successfully\n****************************************************************\n",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.366754Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_invalid_sendgrid_key_warning",
    "nodeid": "tests/e2e/test_email.py::test_invalid_sendgrid_key_warning",
    "status": "passed",
    "duration": 0.0014507909945677966,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 35,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.368819Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_load_email_env_file_not_found",
    "nodeid": "tests/e2e/test_email.py::test_load_email_env_file_not_found",
    "status": "passed",
    "duration": 0.00011462499969638884,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 59,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.369269Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_send_email_handles_exception",
    "nodeid": "tests/e2e/test_email.py::test_send_email_handles_exception",
    "status": "passed",
    "duration": 0.00118766599916853,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 64,
    "stdout": "\u274c Failed to send email: SMTP Error\n",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.373587Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_warns_on_invalid_sendgrid_key",
    "nodeid": "tests/e2e/test_email.py::test_warns_on_invalid_sendgrid_key",
    "status": "passed",
    "duration": 0.0007577090000268072,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 82,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.375203Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_load_email_env_parses_file_correctly",
    "nodeid": "tests/e2e/test_email.py::test_load_email_env_parses_file_correctly",
    "status": "passed",
    "duration": 0.00032208298216573894,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_email.py",
    "line": 103,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.376008Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_plugin_logs_expected_results",
    "nodeid": "tests/e2e/test_plugin.py::test_plugin_logs_expected_results",
    "status": "failed",
    "duration": 0.00463020900497213,
    "error": "def test_plugin_logs_expected_results():\n        with tempfile.TemporaryDirectory() as tmpdir:\n            report_path = os.path.join(tmpdir, \"report.json\")\n    \n>           result = subprocess.run(\n                [\n                    \"poetry\", \"run\", \"pytest\",\n                    \"tests/dummy_tests\",\n                    \"--capture-screenshots=none\",\n                    f\"--json-report={report_path}\",\n                ],\n                capture_output=True,\n                text=True\n            )\n\ntests/e2e/test_plugin.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/subprocess.py:548: in run\n    with Popen(*popenargs, **kwargs) as process:\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: 255 args: ['poetry', 'run', 'pytest', 'tests/dummy_tests...>\nargs = ['poetry', 'run', 'pytest', 'tests/dummy_tests', '--capture-screenshots=none', '--json-report=/var/folders/g2/_mj71t4n2x97bkzbfyf48q5r0000gn/T/tmpoxmtre_9/report.json']\nexecutable = b'poetry', preexec_fn = None, close_fds = True, pass_fds = (), cwd = None, env = None, startupinfo = None, creationflags = 0, shell = False, p2cread = -1, p2cwrite = -1\nc2pread = 8, c2pwrite = 9, errread = 10, errwrite = 11, restore_signals = True, gid = None, gids = None, uid = None, umask = -1, start_new_session = False, process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                if err_msg == \"noexec:chdir\":\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                elif err_msg == \"noexec\":\n                    err_msg = \"\"\n                    err_filename = None\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n                if err_filename is not None:\n>                   raise child_exception_type(errno_num, err_msg, err_filename)\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'poetry'\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/subprocess.py:1955: FileNotFoundError",
    "markers": [],
    "file": "tests/e2e/test_plugin.py",
    "line": 8,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.401083Z",
    "screenshot": "test_plugin_logs_expected_results.png",
    "logs": ["E           =========================== logs ===========================\nE           waiting for get_by_test_id(\"dsar-step-name\").get_by_text(\"Access Data\", exact=True)\nE           ============================================================"],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_take_screenshot_on_failure_creates_file",
    "nodeid": "tests/e2e/test_screenshots.py::test_take_screenshot_on_failure_creates_file",
    "status": "passed",
    "duration": 0.00037320799310691655,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_screenshots.py",
    "line": 5,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.402009Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_take_screenshot_selenium_creates_file",
    "nodeid": "tests/e2e/test_screenshots.py::test_take_screenshot_selenium_creates_file",
    "status": "passed",
    "duration": 0.0001655000087339431,
    "error": null,
    "markers": [],
    "file": "tests/e2e/test_screenshots.py",
    "line": 18,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.402406Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_flaky_network_call",
    "nodeid": "tests/unit/test_flaky_badge.py::test_flaky_network_call",
    "status": "failed",
    "duration": 5.620799493044615e-05,
    "error": "def test_flaky_network_call():\n        attempt_counter[\"count\"] += 1\n        if attempt_counter[\"count\"] == 1:\n>           assert False, \"Simulated network failure\"\nE           AssertionError: Simulated network failure\nE           assert False\n\ntests/unit/test_flaky_badge.py:9: AssertionError",
    "markers": [],
    "file": "tests/unit/test_flaky_badge.py",
    "line": 5,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.403449Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_merges_multiple_jsons_with_same_nodeid",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_merges_multiple_jsons_with_same_nodeid",
    "status": "passed",
    "duration": 0.00042983400635421276,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 22,
    "stdout": "[{'nodeid': 'test_sample.py::test_case', 'status': 'passed', 'flaky': True, 'flaky_attempts': ['failed', 'passed']}]\n",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.404298Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_fallback_to_test_key",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_fallback_to_test_key",
    "status": "passed",
    "duration": 0.0003940839960705489,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 42,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.405150Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_ignores_invalid_json",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_ignores_invalid_json",
    "status": "passed",
    "duration": 0.00031708399183116853,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 61,
    "stdout": "\u26a0\ufe0f Could not parse broken.json: Expecting property name enclosed in double quotes: line 1 column 3 (char 2)\n",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.405884Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_non_flaky_test",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_non_flaky_test",
    "status": "passed",
    "duration": 0.0003271670138929039,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 78,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.407212Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_flaky_status_detection",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_flaky_status_detection",
    "status": "passed",
    "duration": 0.0003727080184035003,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 95,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.408187Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_merges_dict_with_results_key",
    "nodeid": "tests/unit/test_json_merger.py::TestMergeJsonReports::test_merges_dict_with_results_key",
    "status": "passed",
    "duration": 0.00029612501384690404,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_json_merger.py",
    "line": 115,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.408920Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_single_non_flaky_test",
    "nodeid": "tests/unit/test_mark_flaky_tests.py::TestMarkFlakyTests::test_single_non_flaky_test",
    "status": "passed",
    "duration": 2.6291003450751305e-05,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_mark_flaky_tests.py",
    "line": 7,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.409319Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_flaky_test_with_multiple_attempts",
    "nodeid": "tests/unit/test_mark_flaky_tests.py::TestMarkFlakyTests::test_flaky_test_with_multiple_attempts",
    "status": "passed",
    "duration": 2.3125001462176442e-05,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_mark_flaky_tests.py",
    "line": 17,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.409537Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_mixed_tests_flaky_and_non_flaky",
    "nodeid": "tests/unit/test_mark_flaky_tests.py::TestMarkFlakyTests::test_mixed_tests_flaky_and_non_flaky",
    "status": "passed",
    "duration": 2.3250002413988113e-05,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_mark_flaky_tests.py",
    "line": 30,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.409748Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_preserves_other_fields",
    "nodeid": "tests/unit/test_mark_flaky_tests.py::TestMarkFlakyTests::test_preserves_other_fields",
    "status": "passed",
    "duration": 2.6875000912696123e-05,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_mark_flaky_tests.py",
    "line": 49,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.409961Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_extract_links_with_multiple_marker_names",
    "nodeid": "tests/unit/test_marker_links.py::test_extract_links_with_multiple_marker_names",
    "status": "passed",
    "duration": 0.0008341250068042427,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_marker_links.py",
    "line": 7,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.411021Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_extract_links_with_no_markers",
    "nodeid": "tests/unit/test_marker_links.py::test_extract_links_with_no_markers",
    "status": "passed",
    "duration": 0.00018066700431518257,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_marker_links.py",
    "line": 28,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.411674Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  },
  {
    "test": "test_extract_links_with_non_string_args",
    "nodeid": "tests/unit/test_marker_links.py::test_extract_links_with_non_string_args",
    "status": "passed",
    "duration": 0.0002210829989053309,
    "error": null,
    "markers": [],
    "file": "tests/unit/test_marker_links.py",
    "line": 35,
    "stdout": "",
    "stderr": "",
    "timestamp": "2025-06-25T16:53:51.412204Z",
    "screenshot": null,
    "logs": [],
    "worker": "main",
    "links": [],
    "flaky": false
  }
]